[kernel] Parsing isp_test_031.c (with preprocessing)
[isp] No entry point was specified! The default entry point "main" will be used.
[isp] Execute Eva with entry point "main"
[eva] Analyzing an incomplete application starting at main
[eva:initial-state] Values of globals at initialization
  DB[0..4] ∈ [--..--]
  X ∈ [--..--]
[eva:alarm] isp_test_031.c:19: Warning: 
  function main, behavior interface_spec: precondition DB[RPM] ∈ (0 .. 9000) got status unknown.
[eva:alarm] isp_test_031.c:20: Warning: 
  function main, behavior interface_spec: precondition DB[SPEED] ∈ (0 .. 400) got status unknown.
[eva:alarm] isp_test_031.c:21: Warning: 
  function main, behavior interface_spec: precondition DB[TEMPERATURE] ∈
                                                       (0 .. 400) got status unknown.
[eva:alarm] isp_test_031.c:22: Warning: 
  function main, behavior interface_spec: precondition DB[HUMIDITY] ∈
                                                       (0 .. 100) got status unknown.
[eva:alarm] isp_test_031.c:23: Warning: 
  function main, behavior interface_spec: precondition DB[PRESSURE] ∈
                                                       (0 .. 150) got status unknown.
[eva:alarm] isp_test_031.c:24: Warning: 
  function main, behavior interface_spec: precondition X ∈
                                                       {RPM, SPEED, PRESSURE} got status unknown.
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  2 functions analyzed (out of 2): 100% coverage.
  In these functions, 9 statements reached (out of 14): 64% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[isp] Eva analysis is completed.
[isp] Warning: Arguments of Enum type (PARAMETER) are not implemented!
[isp] Warning: Unreachable statement: case HUMIDITY: read_db(HUMIDITY);
[isp] Warning: Unreachable statement: break;
[isp] Warning: Unreachable statement: case (PARAMETER)(TEMPERATURE | PRESSURE):
                         read_db(TEMPERATURE);
[isp] Warning: Unreachable statement: read_db(PRESSURE);
[isp] Warning: Unreachable statement: break;
[isp] The transformed source code:
/* Generated by Frama-C */
enum __anonenum_PARAMETER_1 {
    RPM = 0,
    SPEED = 1,
    TEMPERATURE = 2,
    HUMIDITY = 3,
    PRESSURE = 4
};
typedef enum __anonenum_PARAMETER_1 PARAMETER;
int DB[5];
PARAMETER X;
/*@ behavior isp_generated:
      assumes \true;
      requires DB[1] ≥ 0;
      requires DB[1] ≤ 400;
      requires DB[0] ≥ 0;
      requires DB[0] ≤ 9000;
      requires \valid_read(&DB[1]);
      requires \valid_read((int *)DB);
      ensures \result ≥ 0;
      ensures \result ≤ 9000;
      assigns \nothing;
 */
int read_db(PARAMETER p)
{
  int __retres;
  __retres = DB[p];
  return __retres;
}

/*@ behavior interface_spec:
      assumes \true;
      requires \valid_read(&DB[0 .. 4]);
      requires DB[RPM] ∈ (0 .. 9000);
      requires DB[SPEED] ∈ (0 .. 400);
      requires DB[TEMPERATURE] ∈ (0 .. 400);
      requires DB[HUMIDITY] ∈ (0 .. 100);
      requires DB[PRESSURE] ∈ (0 .. 150);
      requires X ∈ {RPM, SPEED, PRESSURE};
      assigns \nothing;
    
    behavior isp_generated:
      assumes \true;
      requires X ∈ {0, 1, 4};
      requires DB[1] ≥ 0;
      requires DB[1] ≤ 400;
      requires DB[0] ≥ 0;
      requires DB[0] ≤ 9000;
      requires \valid_read(&X);
      requires \valid_read(&DB[1]);
      requires \valid_read((int *)DB);
      assigns \nothing;
 */
void main(void)
{
  switch (X) {
    case RPM: read_db(RPM);
    break;
    case SPEED: read_db(SPEED);
    break;
    case HUMIDITY: read_db(HUMIDITY);
    break;
    case (PARAMETER)(TEMPERATURE | PRESSURE): read_db(TEMPERATURE);
    read_db(PRESSURE);
    break;
    default: break;
  }
  return;
}


