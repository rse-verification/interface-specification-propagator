[kernel] Parsing isp_test_020.c (with preprocessing)
[isp] No entry point was specified! The default entry point "main" will be used.
[isp] Execute Eva with entry point "main"
[eva] Analyzing an incomplete application starting at main
[eva:initial-state] Values of globals at initialization
  X ∈ [--..--]
  Y[0..9] ∈ [--..--]
[eva:alarm] isp_test_020.c:14: Warning: 
  function main, behavior interface_spec: precondition Y[0 .. 8] ≡ 0 got status unknown.
[eva:alarm] isp_test_020.c:15: Warning: 
  function main, behavior interface_spec: precondition X ≥ 1 ∧ X ≤ 8 got status unknown.
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  1 function analyzed (out of 1): 100% coverage.
  In this function, 2 statements reached (out of 2): 100% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[isp] Eva analysis is completed.
[isp] The transformed source code:
/* Generated by Frama-C */
int X;
int Y[10];
/*@ behavior interface_spec:
      assumes \true;
      requires \valid_read(&X);
      requires \valid_read(&Y[1 .. 8]);
      requires \valid(&Y[1 .. 8]);
      requires Y[0 .. 8] ≡ 0;
      requires X ≥ 1 ∧ X ≤ 8;
      ensures Y[1] ≥ 0 ∧ Y[1] ≤ 8;
      ensures Y[2] ≥ 0 ∧ Y[2] ≤ 8;
      ensures Y[3] ≥ 0 ∧ Y[3] ≤ 8;
      ensures Y[4] ≥ 0 ∧ Y[4] ≤ 8;
      ensures Y[5] ≥ 0 ∧ Y[5] ≤ 8;
      ensures Y[6] ≥ 0 ∧ Y[6] ≤ 8;
      ensures Y[7] ≥ 0 ∧ Y[7] ≤ 8;
      ensures Y[8] ≥ 0 ∧ Y[8] ≤ 8;
      assigns Y[1 .. 8];
    
    behavior isp_generated:
      assumes \true;
      requires X ∈ {1, 2, 3, 4, 5, 6, 7, 8};
      requires \valid_read(&Y[4]);
      requires \valid(&Y[4]);
      requires \valid_read(&Y[8]);
      requires \valid(&Y[8]);
      requires \valid_read(&Y[6]);
      requires \valid(&Y[6]);
      requires \valid_read(&Y[1]);
      requires \valid(&Y[1]);
      requires \valid_read(&Y[5]);
      requires \valid(&Y[5]);
      requires \valid_read(&Y[2]);
      requires \valid(&Y[2]);
      requires \valid_read(&Y[7]);
      requires \valid(&Y[7]);
      requires \valid_read(&Y[3]);
      requires \valid(&Y[3]);
      requires \valid_read(&X);
      ensures Y[4] ≥ 0;
      ensures Y[4] ≤ 8;
      ensures Y[8] ≥ 0;
      ensures Y[8] ≤ 8;
      ensures Y[6] ≥ 0;
      ensures Y[6] ≤ 8;
      ensures Y[1] ≥ 0;
      ensures Y[1] ≤ 8;
      ensures Y[5] ≥ 0;
      ensures Y[5] ≤ 8;
      ensures Y[2] ≥ 0;
      ensures Y[2] ≤ 8;
      ensures Y[7] ≥ 0;
      ensures Y[7] ≤ 8;
      ensures Y[3] ≥ 0;
      ensures Y[3] ≤ 8;
      assigns Y[3], Y[7], Y[2], Y[5], Y[1], Y[6], Y[8], Y[4];
 */
void main(void)
{
  Y[X] = X;
  return;
}


