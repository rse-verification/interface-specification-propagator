[kernel] Parsing isp_010_enum_typedef.c (with preprocessing)
[isp] No entry point was specified! The default entry point "main" will be used.
[isp] Execute Eva with entry point "main"
[eva] Analyzing an incomplete application starting at main
[eva:initial-state] Values of globals at initialization
  X[0..3] ∈ [--..--]
[eva:alarm] isp_010_enum_typedef.c:18: Warning: 
  function main, behavior interface_spec: precondition X[0 .. 1] ≡ 1 got status unknown.
[eva:alarm] isp_010_enum_typedef.c:19: Warning: 
  function main, behavior interface_spec: precondition X[EN3] ∈
                                                       {1, 2, 3, 4, 5} got status unknown.
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  2 functions analyzed (out of 2): 100% coverage.
  In these functions, 4 statements reached (out of 4): 100% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[isp] Eva analysis is completed.
[isp] The transformed source code:
/* Generated by Frama-C */
enum __anonenum_SIGNAL_1 {
    EN1 = 0,
    EN2 = 1,
    EN3 = 2,
    EN4 = 3,
    NUM_ENS = 4
};
int X[NUM_ENS];
/*@ requires X[EN2] ≡ 1;
    requires X[EN3] ∈ {1, 2, 3, 4, 5};
    requires X[EN1] ≡ 1;
    requires \valid_read(&X[EN2]);
    requires \valid_read(&X[EN3]);
    requires \valid_read(&X[EN1]);
    ensures \result ∈ {3, 4, 5, 6, 7};
    assigns \nothing;
 */
int first_3_sum(void)
{
  int __retres;
  __retres = (X[EN1] + X[EN2]) + X[EN3];
  return __retres;
}

/*@ requires X[EN2] ≡ 1;
    requires X[EN3] ∈ {1, 2, 3, 4, 5};
    requires X[EN1] ≡ 1;
    requires \valid_read(&X[3]);
    requires \valid(&X[3]);
    requires \valid_read(&X[EN2]);
    requires \valid_read(&X[EN3]);
    requires \valid_read(&X[EN1]);
    ensures X[3] ∈ {3, 4, 5, 6, 7};
    assigns X[3];
    
    behavior interface_spec:
      assumes \true;
      requires \valid_read(&X[0 .. 3]);
      requires \valid(&X[3]);
      requires X[0 .. 1] ≡ 1;
      requires X[EN3] ∈ {1, 2, 3, 4, 5};
      assigns X[3];
 */
void main(void)
{
  X[3] = first_3_sum();
  return;
}


