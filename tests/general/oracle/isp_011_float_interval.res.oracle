[kernel] Parsing isp_011_float_interval.c (with preprocessing)
[isp] No entry point was specified! The default entry point "main" will be used.
[isp] Execute Eva with entry point "main"
[eva] Analyzing an incomplete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  X ∈ [-1.79769313486e+308 .. 1.79769313486e+308]
  Y ∈ [-1.79769313486e+308 .. 1.79769313486e+308]
[eva:alarm] isp_011_float_interval.c:22: Warning: 
  function main, behavior interface_spec: precondition X ≥ 0 got status unknown.
[eva:alarm] isp_011_float_interval.c:23: Warning: 
  function main, behavior interface_spec: precondition X ≤ 10 got status unknown.
[eva] done for function main
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  3 functions analyzed (out of 3): 100% coverage.
  In these functions, 7 statements reached (out of 7): 100% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[isp] Eva analysis is completed.
[isp] The transformed source code:
/* Generated by Frama-C */
double X;
double Y;
/*@ requires x ≥ -0. ∧ x ≤ 10.;
    ensures \result ≥ -0. ∧ \result ≤ 30.;
    assigns \nothing;
 */
double triple(double x)
{
  double __retres;
  __retres = x * 3.0;
  return __retres;
}

/*@ requires t ≥ -0. ∧ t ≤ 30.;
    requires \valid_read(&Y);
    requires \valid(&Y);
    ensures Y ≥ -0. ∧ Y ≤ 30.;
    assigns Y;
 */
void set_y(double t)
{
  Y = t;
  return;
}

/*@ requires X ≥ -0. ∧ X ≤ 10.;
    requires \valid_read(&Y);
    requires \valid(&Y);
    requires \valid_read(&X);
    ensures Y ≥ -0. ∧ Y ≤ 30.;
    assigns Y;
    
    behavior interface_spec:
      assumes \true;
      requires \valid_read(&X);
      requires \valid_read(&Y);
      requires \valid(&Y);
      requires X ≥ 0;
      requires X ≤ 10;
      ensures Y ≥ 0 ∧ Y ≤ 30;
      assigns Y;
 */
void main(void)
{
  double t = triple(X);
  set_y(t);
  return;
}


