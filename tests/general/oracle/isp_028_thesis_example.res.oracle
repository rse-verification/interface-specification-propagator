[kernel] Parsing isp_028_thesis_example.c (with preprocessing)
[isp] No entry point was specified! The default entry point "main" will be used.
[isp] Execute Eva with entry point "main"
[eva] Analyzing an incomplete application starting at main
[eva] Computing initial state
[eva] Initial state computed
[eva:initial-state] Values of globals at initialization
  WHEEL_SPEED ∈ [--..--]
  STATE ∈ [--..--]
[eva:alarm] isp_028_thesis_example.c:23: Warning: 
  function main, behavior interface_spec: precondition WHEEL_SPEED ∈
                                                       (0 .. 400) got status unknown.
[eva] done for function main
[eva:summary] ====== ANALYSIS SUMMARY ======
  ----------------------------------------------------------------------------
  2 functions analyzed (out of 2): 100% coverage.
  In these functions, 6 statements reached (out of 6): 100% coverage.
  ----------------------------------------------------------------------------
  No errors or warnings raised during the analysis.
  ----------------------------------------------------------------------------
  0 alarms generated by the analysis.
  ----------------------------------------------------------------------------
  No logical properties have been reached by the analysis.
  ----------------------------------------------------------------------------
[isp] Eva analysis is completed.
[isp] The transformed source code:
/* Generated by Frama-C */
enum __anonenum_VEHICLE_STATE_1 {
    STAND_STILL = 0,
    MOVING = 1
};
int WHEEL_SPEED;
int STATE;
/*@ behavior isp_generated:
      assumes \true;
      requires WHEEL_SPEED ≥ 0;
      requires WHEEL_SPEED ≤ 400;
      requires \valid_read(&STATE);
      requires \valid(&STATE);
      requires \valid_read(&WHEEL_SPEED);
      ensures STATE ∈ {0, 1};
      assigns STATE;
 */
void update_state(void)
{
  if (WHEEL_SPEED > 0) STATE = MOVING; else STATE = STAND_STILL;
  return;
}

/*@ behavior interface_spec:
      assumes \true;
      requires \valid_read(&WHEEL_SPEED);
      requires \valid_read(&STATE);
      requires \valid(&STATE);
      requires WHEEL_SPEED ∈ (0 .. 400);
      ensures STATE ∈ {0, 1};
      assigns STATE;
    
    behavior isp_generated:
      assumes \true;
      requires WHEEL_SPEED ≥ 0;
      requires WHEEL_SPEED ≤ 400;
      requires \valid_read(&STATE);
      requires \valid(&STATE);
      requires \valid_read(&WHEEL_SPEED);
      ensures STATE ∈ {0, 1};
      assigns STATE;
 */
void main(void)
{
  update_state();
  return;
}


